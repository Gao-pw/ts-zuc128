//#region src/utils/index.ts
/** 循环左移 (JS 的 >>> 保证无符号) */
const rotl = (x, n) => (x << n | x >>> 32 - n) >>> 0;

//#endregion
//#region src/box/index.ts
const S0$1 = new Uint8Array([
	62,
	114,
	91,
	71,
	202,
	224,
	0,
	51,
	4,
	209,
	84,
	152,
	9,
	185,
	109,
	203,
	123,
	27,
	249,
	50,
	175,
	157,
	106,
	165,
	184,
	45,
	252,
	29,
	8,
	83,
	3,
	144,
	77,
	78,
	132,
	153,
	228,
	206,
	217,
	145,
	221,
	182,
	133,
	72,
	139,
	41,
	110,
	172,
	205,
	193,
	248,
	30,
	115,
	67,
	105,
	198,
	181,
	189,
	253,
	57,
	99,
	32,
	212,
	56,
	118,
	125,
	178,
	167,
	207,
	237,
	87,
	197,
	243,
	44,
	187,
	20,
	33,
	6,
	85,
	155,
	227,
	239,
	94,
	49,
	79,
	127,
	90,
	164,
	13,
	130,
	81,
	73,
	95,
	186,
	88,
	28,
	74,
	22,
	213,
	23,
	168,
	146,
	36,
	31,
	140,
	255,
	216,
	174,
	46,
	1,
	211,
	173,
	59,
	75,
	218,
	70,
	235,
	201,
	222,
	154,
	143,
	135,
	215,
	58,
	128,
	111,
	47,
	200,
	177,
	180,
	55,
	247,
	10,
	34,
	19,
	40,
	124,
	204,
	60,
	137,
	199,
	195,
	150,
	86,
	7,
	191,
	126,
	240,
	11,
	43,
	151,
	82,
	53,
	65,
	121,
	97,
	166,
	76,
	16,
	254,
	188,
	38,
	149,
	136,
	138,
	176,
	163,
	251,
	192,
	24,
	148,
	242,
	225,
	229,
	233,
	93,
	208,
	220,
	17,
	102,
	100,
	92,
	236,
	89,
	66,
	117,
	18,
	245,
	116,
	156,
	170,
	35,
	14,
	134,
	171,
	190,
	42,
	2,
	231,
	103,
	230,
	68,
	162,
	108,
	194,
	147,
	159,
	241,
	246,
	250,
	54,
	210,
	80,
	104,
	158,
	98,
	113,
	21,
	61,
	214,
	64,
	196,
	226,
	15,
	204,
	12,
	19,
	236,
	95,
	151,
	68,
	23,
	196,
	167,
	125,
	61,
	100,
	93,
	25,
	115,
	96,
	129,
	79,
	220,
	34,
	42,
	144,
	136,
	70,
	238,
	184,
	20,
	222,
	94,
	11,
	219
]);
const S1$1 = new Uint8Array([
	110,
	212,
	122,
	34,
	62,
	108,
	91,
	126,
	203,
	5,
	75,
	9,
	28,
	106,
	26,
	157,
	80,
	239,
	96,
	17,
	63,
	251,
	85,
	86,
	242,
	56,
	98,
	181,
	25,
	27,
	53,
	200,
	114,
	155,
	49,
	61,
	186,
	112,
	105,
	144,
	160,
	137,
	14,
	9,
	142,
	85,
	52,
	27,
	59,
	26,
	131,
	100,
	103,
	129,
	125,
	102,
	74,
	151,
	100,
	111,
	15,
	55,
	107,
	237,
	8,
	58,
	140,
	71,
	137,
	201,
	126,
	139,
	99,
	138,
	94,
	31,
	11,
	57,
	46,
	73,
	159,
	28,
	1,
	39,
	125,
	95,
	155,
	106,
	98,
	145,
	10,
	57,
	90,
	4,
	25,
	15,
	6,
	131,
	38,
	105,
	12,
	43,
	83,
	159,
	107,
	62,
	145,
	90,
	41,
	57,
	109,
	148,
	115,
	11,
	158,
	52,
	27,
	119,
	78,
	73,
	110,
	48,
	137,
	105,
	181,
	45,
	101,
	7,
	128,
	57,
	59,
	67,
	39,
	7,
	109,
	9,
	113,
	110,
	27,
	159,
	107,
	71,
	125,
	95,
	31,
	59,
	26,
	131,
	100,
	103,
	129,
	125,
	102,
	74,
	151,
	100,
	111,
	15,
	55,
	107,
	237,
	8,
	58,
	140,
	71,
	137,
	201,
	126,
	139,
	99,
	138,
	94,
	31,
	11,
	57,
	46,
	73,
	159,
	28,
	1,
	39,
	125,
	95,
	155,
	106,
	98,
	145,
	10,
	57,
	90,
	4,
	25,
	15,
	6,
	131,
	38,
	105,
	12,
	43,
	83,
	159,
	107,
	62,
	145,
	90,
	41,
	57,
	109,
	148,
	115,
	11,
	158,
	52,
	27,
	119,
	78,
	73,
	110,
	48,
	137,
	105,
	181,
	45,
	101,
	7,
	128,
	57,
	59,
	67,
	39,
	7,
	109,
	9,
	113,
	110,
	27,
	159,
	107,
	71,
	125,
	95,
	31,
	59,
	26,
	131,
	100,
	103,
	129,
	125,
	102,
	74,
	151,
	100,
	111,
	15,
	55,
	107,
	237,
	8,
	58,
	140,
	71,
	137,
	201,
	126,
	139,
	99,
	138,
	94,
	31,
	11,
	57,
	46,
	73,
	159,
	28,
	1,
	39,
	125,
	95,
	155,
	106,
	98,
	145,
	10,
	57,
	90,
	4,
	25,
	15,
	6,
	131,
	38,
	105,
	12,
	43,
	83,
	159,
	107,
	62,
	145,
	90,
	41,
	57,
	109,
	148,
	115,
	11,
	158,
	52,
	27,
	119,
	78,
	73,
	110,
	48,
	137,
	105,
	181,
	45,
	101,
	7,
	128,
	57,
	59,
	67,
	39,
	7,
	109,
	9,
	113,
	110,
	27,
	159,
	107,
	71,
	125,
	95,
	31,
	59,
	26,
	131,
	100,
	103,
	129,
	125,
	102,
	74,
	151,
	100,
	111,
	15,
	55,
	107,
	237,
	8,
	58,
	140,
	71,
	137,
	201,
	126,
	139,
	99,
	138,
	94,
	31,
	11,
	57,
	46,
	73,
	159,
	28,
	1,
	39,
	125,
	95,
	155,
	106,
	98,
	145,
	10,
	57,
	90,
	4,
	25,
	15,
	6,
	131,
	38,
	105,
	12,
	43,
	83,
	159,
	107,
	62,
	145,
	90,
	41,
	57,
	109,
	148,
	115,
	11,
	158,
	52,
	27,
	119,
	78,
	73,
	110,
	48,
	137,
	105,
	181,
	45,
	101,
	7,
	128,
	57,
	59,
	67,
	39,
	7,
	109,
	9,
	113,
	110,
	27,
	159,
	107,
	71,
	125,
	95,
	31
]);
var box_default = {
	S0: S0$1,
	S1: S1$1
};

//#endregion
//#region src/index.ts
const { S0, S1 } = box_default;
var ZUC128 = class {
	s = new Array(16);
	r1 = 0;
	r2 = 0;
	constructor(key, iv) {
		if (key.length !== 16 || iv.length !== 16) throw new Error("ZUC-128 需要 16 B 密钥 + 16 B IV");
		this.init(key, iv);
	}
	/** 1. 密钥加载 + LFSR 初态（国标 6.2） */
	init(key, iv) {
		const d = [
			17623,
			9916,
			25195,
			4958,
			22409,
			13794,
			28981,
			2479,
			19832,
			12051,
			27588,
			6897,
			24102,
			15692,
			18344,
			1069
		];
		for (let i = 0; i < 16; i++) {
			const k16 = key[i] << 8 | iv[i];
			this.s[i] = k16 ^ d[i];
		}
		for (let i = 0; i < 32; i++) {
			this.bitReconstruction();
			this.f();
			this.lfsrWithInitialisationMode(this.r1 >>> 1);
		}
	}
	/** 2. 比特重组 BR（国标 6.3） */
	bitReconstruction() {
		const s = this.s;
		const X0 = (s[15] << 16 | s[14] >>> 15) >>> 0;
		const X1 = (s[11] << 16 | s[9] >>> 15) >>> 0;
		const X2 = (s[7] << 16 | s[5] >>> 15) >>> 0;
		const X3 = (s[3] << 16 | s[1] >>> 15) >>> 0;
		return [
			X0,
			X1,
			X2,
			X3
		];
	}
	/** 3. 非线性函数 F（国标 6.4） */
	f() {
		const [X0, X1, , X3] = this.bitReconstruction();
		const w = (X0 ^ this.r1) >>> 0;
		const w1 = this.r2;
		const w2 = (this.r1 ^ X1) >>> 0;
		const sb = S0[w >>> 24] << 24 | S1[w >>> 16 & 255] << 16 | S0[w >>> 8 & 255] << 8 | S1[w & 255];
		const u = rotl(sb, 8) ^ w2;
		const v = rotl(u, 16) ^ w1;
		this.r1 = (rotl(X3 << 8, 9) ^ v) >>> 0;
		this.r2 = u >>> 0;
		return this.r1;
	}
	/** 4. LFSR 更新（初始化模式） */
	lfsrWithInitialisationMode(u) {
		const s = this.s;
		const v = (s[0] & 2147483647) >>> 0;
		for (let i = 0; i < 15; i++) s[i] = s[i + 1];
		s[15] = (v ^ u) >>> 0;
	}
	/** 5. LFSR 更新（工作模式） */
	lfsrWithWorkMode() {
		const s = this.s;
		this.f();
		const v = (s[0] & 2147483647) >>> 0;
		for (let i = 0; i < 15; i++) s[i] = s[i + 1];
		s[15] = v >>> 0;
	}
	/** 6. 生成 4 B 密钥流（对外最小粒度） */
	nextWord() {
		this.lfsrWithWorkMode();
		const z = this.f() ^ this.bitReconstruction()[3];
		return z >>> 0;
	}
	/** 7. 加/解密接口：输入任意长度，返回等长密文/明文 */
	crypt(plain) {
		const out = new Uint8Array(plain.length);
		let i = 0;
		while (i + 4 <= plain.length) {
			const z = this.nextWord();
			const view = new DataView(out.buffer, i);
			view.setUint32(0, z, false);
			for (let j = 0; j < 4; j++) out[i + j] ^= plain[i + j];
			i += 4;
		}
		while (i < plain.length) {
			const byte = this.nextWord() >>> 24 - (i & 3) * 8 & 255;
			out[i] = plain[i] ^ byte;
			i++;
		}
		return out;
	}
};

//#endregion
export { ZUC128 };